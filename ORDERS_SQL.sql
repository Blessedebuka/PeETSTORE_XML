create table orders
(Order_Id int, Order_Date text,	Ship_Mode text,	Segment text, Country text,
City text, State text, Postal_Code int,	Region text, Category text,
Sub_Category text, Product_Id text,	Cost_Price int,	List_Price int,
Quantity int, Discount_Percent int);
select * from Orders;
load data local infile 'C:/Users/USER/OneDrive - MSFT/Desktop/SQL FILES/Orders files/orders.csv'
into table orders fields terminated by ',' 
optionally enclosed by '"'
lines terminated by '\r\n'
ignore 1 rows;
-- DATA CLEANING--------------------
DESCRIBE ORDERS;
-- CHANGE THE DATA TYPE OF ORDER_DATE
ALTER TABLE ORDERS MODIFY COLUMN ORDER_DATE date;
-- ADD A NEW COLUMN CALLED SALE PRICE GOTTEN FROM LIST PRICE AND DISCOUNT_PERCENT
ALTER TABLE ORDERS ADD COLUMN Sale_Price float;
set sql_safe_updates =0;
UPDATE ORDERS SET Sale_Price = CAST((List_Price*100)/(100-Discount_Percent) AS DECIMAL (10,2));
SELECT * FROM ORDERS;

-- ANALYSIS
-- 1. TOTAL SALES - THERE'S A TOTAL OF $11907477.08 GENERATED AS SALES
SELECT CAST(sum(SALE_PRICE*QUANTITY) AS DECIMAL (10,2))
AS REVENUE FROM ORDERS WHERE LIST_PRICE !=0;
-- 2. TOTAL PRODUCTS- THERE ARE 1856 UNIQUE PRODUCTS
SELECT COUNT(distinct PRODUCT_ID) AS 
NUMBER_OF_PRODUCTS FROM ORDERS WHERE LIST_PRICE !=0;
-- 3. TOTAL COST- $10039400 COST INCURED ON THESE PRODUCTS
SELECT sum(COST_PRICE*QUANTITY)
AS TOTAL_COST FROM ORDERS WHERE LIST_PRICE !=0;
-- 4. TOTAL PROFIT- $1868077.08 REALIZED AS PROFIT OVER THE 2 YEARS SALES
SELECT CAST(sum(SALE_PRICE*QUANTITY)- 
sum(COST_PRICE*QUANTITY) AS DECIMAL (10,2))
AS TOTAL_PROFIT FROM ORDERS WHERE LIST_PRICE !=0;
-- 5. YOY SALES
-- LET'S GET TO SEE THE YEARLY SALES OF 2022 AND 2023 FIRST...
SELECT year(ORDER_DATE) AS YEAR, CAST(sum(SALE_PRICE*QUANTITY)
AS DECIMAL (10,2)) FROM ORDERS GROUP BY year(ORDER_DATE);
-- YEAR 2022 GENERATED $5894895.00 & 2023 HAD $6012582.08.
-- WE NOW LOOK AT YOY SALES, IE, CURRENT YR-PREVIOUS YR/PREVIOUS YR
SELECT CAST(YOY_SALES*100 AS DECIMAL (10,2)) AS YOY_PERCENT FROM
(SELECT (CY_SALES-PY_SALES)/PY_SALES AS YOY_SALES FROM
(SELECT
(SELECT CAST(sum(SALE_PRICE*QUANTITY) AS DECIMAL (10,2)) FROM ORDERS WHERE
YEAR(ORDER_DATE) =2023 AND LIST_PRICE !=0) AS CY_SALES,
(SELECT CAST(sum(SALE_PRICE*QUANTITY) AS DECIMAL (10,2))
FROM ORDERS WHERE YEAR(ORDER_DATE) =2022 AND LIST_PRICE !=0) AS PY_SALES)PA)JA;
-- THERE'S A SLIGHT RISE IN SALES FROM 2022 TO 2023, A 2% INCREASE
-- 7. YOY PROFIT
SELECT * FROM ORDERS;
-- LET'S FIRST LOOK AT YEARLY PROFITS
SELECT sum(SALE_PRICE*QUANTITY) - sum(COST_PRICE*QUANTITY) AS PROFIT,
YEAR(ORDER_DATE) AS YEAR FROM ORDERS GROUP BY YEAR(ORDER_DATE);
-- 2022 RETURNED A SLIGHT HOGHER PROFIT THAN 2023. THIS WILL
-- DEFINITELY AFFECT OUR YOY PROFIT AS WE EXPECT A SLIGHT NEGATIVE VALUE.
SELECT CAST(((CY_PROFIT-PY_PROFIT)/PY_PROFIT *100)
AS DECIMAL (10,2)) AS YOY_PROFIT
FROM
(SELECT
(SELECT sum(SALE_PRICE*QUANTITY) - sum(COST_PRICE*QUANTITY)
FROM ORDERS WHERE YEAR(ORDER_DATE) =2023) AS CY_PROFIT,
(SELECT sum(SALE_PRICE*QUANTITY) - sum(COST_PRICE*QUANTITY)
FROM ORDERS WHERE YEAR(ORDER_DATE) =2022) AS PY_PROFIT)HANNA;
-- THE YOY PROFIT WITH A -0.51% INDICATES A SLIGHT DROP IN PROFIT
-- IT BOILS DOWN TO 2022 PROFIT SLIGHTLY HIGHER THAN THAT OF 2023
-- WITH A VALUE OF $4770, AGAIN, COSTS OF THE PRODUCTS IN 2023 WERE
-- ABOUT $122,460 HIGHER THAN THAT OF 2022. 

-- 8. YEARLY COSTS - PRODUCTS COST $5,080,930 IN 2023 AND $4,958,470
SELECT year(ORDER_DATE) AS YEAR, sum(COST_PRICE*QUANTITY)
FROM ORDERS GROUP BY year(ORDER_DATE);

-- 9. MONTHLY SALES- HOW ARE SALES GENERATED OVER THE MONTHS
SELECT monthname(ORDER_DATE) AS MONTH_NAME,
CAST(sum(SALE_PRICE*QUANTITY) AS DECIMAL (10,2))
AS REVENUE FROM ORDERS GROUP BY monthname(ORDER_DATE)
ORDER BY REVENUE DESC;
-- OCTOBER YIELDED THE BEST SALES WHILE MARCH HAD THE LEAST
-- 10. DAILY SALES- HOW WERE SALES PERFORMED ON DAILY BASIS?
SELECT DAYNAME(ORDER_DATE) AS DAY_NAME,
CAST(sum(SALE_PRICE*QUANTITY) AS DECIMAL (10,2))
AS REVENUE FROM ORDERS GROUP BY DAYNAME(ORDER_DATE)
ORDER BY REVENUE DESC;
--  SAT HAD THE BEST SALES RETURN WHILE THU HAD THE LEAST 
-- THERE'S A KIND OFTREND THAT SALES WERE BETTER AT 
-- WEEKEND (SAT & SUN) AND BEGINNING OF WEEKS (MON & TUES).

-- 11. TOTAL UNITS SOLD - 36858 UNITS WERE SOLD
SELECT * FROM ORDERS;
SELECT SUM(QUANTITY) AS UNITS_SOLD FROM ORDERS
WHERE LIST_PRICE !=0;

-- 12. TOTAL SALES BY CATEGORY. HOW DO THE VARIOUS PRODUCT CATEGORY
-- PERFORMED DURING SALES?
SELECT CATEGORY AS PRODUCT_CATEGORY, ROUND(SUM(SALE_PRICE*QUANTITY),2) AS TOTAL_SALES
FROM ORDERS GROUP BY CATEGORY ORDER BY TOTAL_SALES DESC;
-- OUT OF THE 3 CATEGORIES, TECHNOLOGY GENERATED
-- THE HIGHEST SALES($4231645.14)
-- FOLLOWED BY FURNITURE($3999601.72) AND
-- FINALLY OFFICE SUPPLIES($3676230.23)

-- 13 UNITS SOLD BY PRODUCT CATEGORY
SELECT CATEGORY, SUM(QUANTITY) AS UNITS_SOLD FROM ORDERS
WHERE LIST_PRICE !=0 GROUP BY CATEGORY;
-- OFFICE SUPPLIES HAD 21964 UNITS SOLD, FURNITURE
-- HAD 7981 UNITS AND TECHNOLOGY HAD 6913 UNITS SOLD.
-- TECHNOLOGY WITH THE LEAST UNITS SOLD COINCIDENTALLY
-- GENERATED THE HIGHEST SALES. ITS B/C THE TECHNOLOGY
-- ITEMS WERE SOLD AT MORE PRICE THAN OFFICE SUPPLIIES.

-- 14.  UNITS SOLD BY CATEGORY AND SUBCATEGORY
SELECT CATEGORY, SUB_CATEGORY, SUM(QUANTITY) AS UNITS_SOLD FROM ORDERS
WHERE LIST_PRICE !=0
GROUP BY CATEGORY, SUB_CATEGORY ORDER BY UNITS_SOLD DESC;
-- SELECT * FROM ORDERS;
-- 15. TOP 5 PRODUCTS BY REVENUE
SELECT CATEGORY, SUB_CATEGORY, SUM(SALE_PRICE*QUANTITY)
AS TOTAL_SALES FROM ORDERS GROUP BY CATEGORY, SUB_CATEGORY
ORDER BY TOTAL_SALES DESC LIMIT 5;
-- CHAIRS (CATEGORY OF FURNITURE) GENERATED THE MOST SALES
-- WHILE BINDERS (FROM CATEGORY OF OFFICE SUPPLIES) HAD THE LEAST

-- 16. BOTTOM 5 PRODUCTS BY REVENUE
SELECT CATEGORY, SUB_CATEGORY, ROUND(SUM(SALE_PRICE*QUANTITY),2)
AS TOTAL_SALES FROM ORDERS GROUP BY CATEGORY, SUB_CATEGORY
ORDER BY TOTAL_SALES ASC LIMIT 5;
-- ALL THE 5 WORST SALES GENERATED - FROM "FASTENERS" TO "SUPPLIES"
-- WERE FROM THE CATEGORY OF
-- "OFFICE SUPPLIES", WHICH MADE A LOT OF SENSE, AS OFFICE
-- SUPPLIES RANKED THE LAST IN TERMS OF TOTAL SALES GENERATED.

-- 17. UNITS SOLD BY MONTH - HOW MAYN UNITS ARE SOLD MONTHLY?
SELECT MONTHNAME(ORDER_DATE) AS MONTH, sum(QUANTITY)
AS UNITS_SOLD FROM ORDERS WHERE LIST_PRICE !=0
GROUP BY MONTHNAME(ORDER_DATE)  ORDER BY UNITS_SOLD DESC;
-- MOST UNITS SALE OCCURED IN JULY WHILE THE LEAST IN SEPTEMBER

-- 18. UNITS SOLD BY DAY - HOW MAYN UNITS ARE SOLD DAILY?
SELECT DAYNAME(ORDER_DATE) AS DAY, sum(QUANTITY)
AS UNITS_SOLD FROM ORDERS WHERE LIST_PRICE !=0
GROUP BY DAYNAME(ORDER_DATE)  ORDER BY UNITS_SOLD DESC;
-- MOST UNITS SALE OCCURED ON TUESDAY WHILE THE LEAST ON SUNDAY

-- 19. PRODUCTS THAT YIELDED THE BIGGEST PROFIT
SELECT CATEGORY, sum(SALE_PRICE*QUANTITY)- sum(COST_PRICE*QUANTITY)
AS PROFIT  FROM ORDERS WHERE LIST_PRICE !=0 
GROUP BY CATEGORY ORDER BY PROFIT DESC;
-- JUST LIKE IN TOTAL SALES, TECHNOLOGY LEADS IN TERMS OF PROFITS
-- AND OFFICE SUPPLIES LAST

-- 20. PROFIT BY MONTH
SELECT monthname(ORDER_DATE) AS MONTH, sum(SALE_PRICE*QUANTITY)- sum(COST_PRICE*QUANTITY)
AS PROFIT  FROM ORDERS GROUP BY monthname(ORDER_DATE) ORDER BY PROFIT DESC;
-- OCTOBER GENERATED THE BEST PROFITS WHILE MARCH THE LEAST.
-- THIS AGRRES WITH THE SALES MONTHLY RETURNS

-- 21. PROFIT BY DAY
SELECT DAYname(ORDER_DATE) AS DAY, sum(SALE_PRICE*QUANTITY)- sum(COST_PRICE*QUANTITY)
AS PROFIT  FROM ORDERS GROUP BY DAYname(ORDER_DATE) ORDER BY PROFIT DESC;
-- SUN HAD THE BEST PROFITS WHILE THU THE LEAST

-- 22. SALES BY REGION
SELECT REGION, ROUND(sum(SALE_PRICE*QUANTITY),2) AS SALES FROM
ORDERS GROUP BY REGION ORDER BY SALES DESC;
-- WEST HAD THE BEST SALES($3726666.48) AND SOUTH($2111250.27) THE LEAST

-- 23. SALES BY STATES
SELECT STATE, ROUND(sum(SALE_PRICE*QUANTITY),2) AS SALES FROM
ORDERS GROUP BY STATE ORDER BY SALES DESC;
-- CAIFORNIA WITH THE BEST SALES OF $2384758.32 WHILE SOUTH DAKOTA
-- WITH THE LEAST ($3854.25)

-- 24. SALES BY CITY
SELECT CITY,  ROUND(sum(SALE_PRICE*QUANTITY),2) AS SALES FROM
ORDERS GROUP BY CITY ORDER BY SALES DESC;
-- NEW YORK CITY WITH THE BEST SALES OF $1309297.37
-- END OF THE ANALYSIS-----------------------------------------------------



















